"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>_default
});
const _express = /*#__PURE__*/ _interopRequireDefault(require("express"));
const _noteController = require("../controllers/note.controller");
const _noteYup = require("../middlewares/yup/note.yup");
const _validate = /*#__PURE__*/ _interopRequireDefault(require("../middlewares/yup/validate"));
const _auth = require("../middlewares/auth");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const noteRouter = _express.default.Router();
noteRouter.post("/create", [
    _auth.getAccessToRoute,
    (0, _validate.default)(_noteYup.createSchema)
], _noteController.createNote);
noteRouter.patch("/isCompleted/:id", [
    _auth.getAccessToRoute,
    (0, _validate.default)(_noteYup.isCompletedSchema)
], _noteController.isCompleted);
noteRouter.get("/getNoteById/:id", [
    _auth.getAccessToRoute,
    (0, _validate.default)(_noteYup.getNoteByIdSchema)
], _noteController.getNoteById);
noteRouter.get("/getAllNotesByUser", [
    _auth.getAccessToRoute,
    _auth.isUserAvailable
], _noteController.getAllNotesByUser);
noteRouter.put("/update/:id", [
    _auth.getAccessToRoute,
    (0, _validate.default)(_noteYup.updateNoteByIdSchema)
], _noteController.updateNoteById);
noteRouter.delete("/deleteNoteById/:id", [
    _auth.getAccessToRoute,
    (0, _validate.default)(_noteYup.deleteNoteByIdSchema)
], _noteController.deleteNoteById);
const _default = noteRouter;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL25vdGUucm91dGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzLCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZU5vdGUsXHJcbiAgaXNDb21wbGV0ZWQsXHJcbiAgZGVsZXRlTm90ZUJ5SWQsXHJcbiAgZ2V0Tm90ZUJ5SWQsXHJcbiAgdXBkYXRlTm90ZUJ5SWQsXHJcbiAgZ2V0QWxsTm90ZXNCeVVzZXIsXHJcbn0gZnJvbSAnLi4vY29udHJvbGxlcnMvbm90ZS5jb250cm9sbGVyJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVTY2hlbWEsXHJcbiAgaXNDb21wbGV0ZWRTY2hlbWEsXHJcbiAgZ2V0Tm90ZUJ5SWRTY2hlbWEsXHJcbiAgZGVsZXRlTm90ZUJ5SWRTY2hlbWEsXHJcbiAgdXBkYXRlTm90ZUJ5SWRTY2hlbWEsXHJcbn0gZnJvbSAnLi4vbWlkZGxld2FyZXMveXVwL25vdGUueXVwJztcclxuaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4uL21pZGRsZXdhcmVzL3l1cC92YWxpZGF0ZSc7XHJcbmltcG9ydCB7IGdldEFjY2Vzc1RvUm91dGUsIGlzVXNlckF2YWlsYWJsZSB9IGZyb20gJy4uL21pZGRsZXdhcmVzL2F1dGgnO1xyXG5cclxuY29uc3Qgbm90ZVJvdXRlcjogUm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcclxuXHJcbm5vdGVSb3V0ZXIucG9zdChcclxuICAnL2NyZWF0ZScsXHJcbiAgW2dldEFjY2Vzc1RvUm91dGUsIHZhbGlkYXRlKGNyZWF0ZVNjaGVtYSldLFxyXG4gIGNyZWF0ZU5vdGVcclxuKTtcclxubm90ZVJvdXRlci5wYXRjaChcclxuICAnL2lzQ29tcGxldGVkLzppZCcsXHJcbiAgW2dldEFjY2Vzc1RvUm91dGUsIHZhbGlkYXRlKGlzQ29tcGxldGVkU2NoZW1hKV0sXHJcbiAgaXNDb21wbGV0ZWRcclxuKTtcclxubm90ZVJvdXRlci5nZXQoXHJcbiAgJy9nZXROb3RlQnlJZC86aWQnLFxyXG4gIFtnZXRBY2Nlc3NUb1JvdXRlLCB2YWxpZGF0ZShnZXROb3RlQnlJZFNjaGVtYSldLFxyXG4gIGdldE5vdGVCeUlkXHJcbik7XHJcbm5vdGVSb3V0ZXIuZ2V0KFxyXG4gICcvZ2V0QWxsTm90ZXNCeVVzZXInLFxyXG4gIFtnZXRBY2Nlc3NUb1JvdXRlLCBpc1VzZXJBdmFpbGFibGVdLFxyXG4gIGdldEFsbE5vdGVzQnlVc2VyXHJcbik7XHJcbm5vdGVSb3V0ZXIucHV0KFxyXG4gICcvdXBkYXRlLzppZCcsXHJcbiAgW2dldEFjY2Vzc1RvUm91dGUsIHZhbGlkYXRlKHVwZGF0ZU5vdGVCeUlkU2NoZW1hKV0sXHJcbiAgdXBkYXRlTm90ZUJ5SWRcclxuKTtcclxubm90ZVJvdXRlci5kZWxldGUoXHJcbiAgJy9kZWxldGVOb3RlQnlJZC86aWQnLFxyXG4gIFtnZXRBY2Nlc3NUb1JvdXRlLCB2YWxpZGF0ZShkZWxldGVOb3RlQnlJZFNjaGVtYSldLFxyXG4gIGRlbGV0ZU5vdGVCeUlkXHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBub3RlUm91dGVyO1xyXG4iXSwibmFtZXMiOlsibm90ZVJvdXRlciIsImV4cHJlc3MiLCJSb3V0ZXIiLCJwb3N0IiwiZ2V0QWNjZXNzVG9Sb3V0ZSIsInZhbGlkYXRlIiwiY3JlYXRlU2NoZW1hIiwiY3JlYXRlTm90ZSIsInBhdGNoIiwiaXNDb21wbGV0ZWRTY2hlbWEiLCJpc0NvbXBsZXRlZCIsImdldCIsImdldE5vdGVCeUlkU2NoZW1hIiwiZ2V0Tm90ZUJ5SWQiLCJpc1VzZXJBdmFpbGFibGUiLCJnZXRBbGxOb3Rlc0J5VXNlciIsInB1dCIsInVwZGF0ZU5vdGVCeUlkU2NoZW1hIiwidXBkYXRlTm90ZUJ5SWQiLCJkZWxldGUiLCJkZWxldGVOb3RlQnlJZFNjaGVtYSIsImRlbGV0ZU5vdGVCeUlkIl0sIm1hcHBpbmdzIjoiOzs7OytCQW9EQTs7YUFBQTs7OERBcERnQztnQ0FRekI7eUJBT0E7K0RBQ2M7c0JBQzZCOzs7Ozs7QUFFbEQsTUFBTUEsYUFBcUJDLGdCQUFPLENBQUNDLE1BQU07QUFFekNGLFdBQVdHLElBQUksQ0FDYixXQUNBO0lBQUNDLHNCQUFnQjtJQUFFQyxJQUFBQSxpQkFBUSxFQUFDQyxxQkFBWTtDQUFFLEVBQzFDQywwQkFBVTtBQUVaUCxXQUFXUSxLQUFLLENBQ2Qsb0JBQ0E7SUFBQ0osc0JBQWdCO0lBQUVDLElBQUFBLGlCQUFRLEVBQUNJLDBCQUFpQjtDQUFFLEVBQy9DQywyQkFBVztBQUViVixXQUFXVyxHQUFHLENBQ1osb0JBQ0E7SUFBQ1Asc0JBQWdCO0lBQUVDLElBQUFBLGlCQUFRLEVBQUNPLDBCQUFpQjtDQUFFLEVBQy9DQywyQkFBVztBQUViYixXQUFXVyxHQUFHLENBQ1osc0JBQ0E7SUFBQ1Asc0JBQWdCO0lBQUVVLHFCQUFlO0NBQUMsRUFDbkNDLGlDQUFpQjtBQUVuQmYsV0FBV2dCLEdBQUcsQ0FDWixlQUNBO0lBQUNaLHNCQUFnQjtJQUFFQyxJQUFBQSxpQkFBUSxFQUFDWSw2QkFBb0I7Q0FBRSxFQUNsREMsOEJBQWM7QUFFaEJsQixXQUFXbUIsTUFBTSxDQUNmLHVCQUNBO0lBQUNmLHNCQUFnQjtJQUFFQyxJQUFBQSxpQkFBUSxFQUFDZSw2QkFBb0I7Q0FBRSxFQUNsREMsOEJBQWM7TUFHaEIsV0FBZXJCIn0=